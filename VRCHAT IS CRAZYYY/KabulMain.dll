using VRC;
using VRC.Core;
using UnityEngine;
using MelonLoader;

[assembly: MelonInfo(typeof(KabulClient.KabulMain), "Kabul Client", "0.0.9", "DonkeyPounder44")]
[assembly: MelonGame("VRChat", "VRChat")]

namespace KabulClient
{
    public class KabulMain : MelonMod
    {
        public override void OnApplicationStart()
        {
            MelonLogger.Msg("OnApplicationStart().");

            MelonLogger.Msg("Hooking NetworkManager.");
            Hooks.NetworkManagerHook.Initialize();
            Hooks.NetworkManagerHook.OnJoin += OnPlayerJoined;
            Hooks.NetworkManagerHook.OnLeave += OnPlayerLeft;

            Drawing.CreateLineMaterial();
        }

        public override void OnSceneWasLoaded(int buildIndex, string sceneName)
        {
            MelonLogger.Msg($"OnSceneWasLoaded({buildIndex}, \"{sceneName}\")");
        }

        public override void OnSceneWasInitialized(int buildIndex, string sceneName)
        {
            MelonLogger.Msg($"OnSceneWasInitialized({buildIndex}, \"{sceneName}\")");

            Features.Worlds.JustBClub.Initialize(sceneName);
            Features.Worlds.AmongUs.Initialize(sceneName);

            base.OnSceneWasInitialized(buildIndex, sceneName);
        }

        public override void OnUpdate()
        {
            // Toggling our menu.
            if (Input.GetKeyDown(KeyCode.Insert))
            {
                Menu.ToggleMenu();
            }

            // Speedhack.
            if (Input.GetKeyDown(KeyCode.X) || Input.GetKeyUp(KeyCode.X))
            {
                Features.Speedhack.Toggle();
            }

            // Failsafe for when the game lags while letting go of X preventing speedhack to turn off.
            if (!Input.GetKey(KeyCode.X) && Features.Speedhack.speedEnabled)
            {
                Features.Speedhack.speedEnabled = false;
            }

            // Noclip.
            if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyDown(KeyCode.F))
            {
                Features.Noclip.Toggle();
            }

            Features.ESP.UpdateColors();
            Features.ESP.Main();
            Features.Noclip.Main();
            Features.Speedhack.Main();
            Features.AntiPortal.Main();
            Features.Worlds.AmongUs.OnUpdate();
        }

        public override void OnGUI()
        {
            // Handle menu rendering.
            Menu.Main();

            // Draw text for ESP.
            Features.ESP.UserInformationESP();

            // Draw line ESP.
            Features.ESP.LineESP();

            // Handle cursor locking to allow interaction with our menu.
            Menu.HandleCursor();

            base.OnGUI();
        }

        public void OnPlayerJoined(Player player)
		{
            APIUser apiUser = player.prop_APIUser_0;

            if (apiUser == null)
            {
                return;
            }

            MelonLogger.Msg($"Player \"{apiUser.displayName}\" joined.");
        }

        public void OnPlayerLeft(Player player)
        {
            APIUser apiUser = player.prop_APIUser_0;

            if (apiUser == null)
            {
                return;
            }

            MelonLogger.Msg($"Player \"{apiUser.displayName}\" left.");
        }
    }
}
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{67155E8A-183F-4AC9-9D92-D481EE608A20}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Universal_IMGUI_Mod_Menu</RootNamespace>
    <AssemblyName>Universal IMGUI Mod Menu</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <Deterministic>true</Deterministic>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Il2Cppmscorlib">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\Il2Cppmscorlib.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
    <Reference Include="UnhollowerBaseLib">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnhollowerBaseLib.dll</HintPath>
    </Reference>
    <Reference Include="UnhollowerRuntimeLib">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnhollowerRuntimeLib.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.IMGUIModule">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnityEngine.IMGUIModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.InputLegacyModule">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnityEngine.InputLegacyModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>F:\Steam\steamapps\common\VRChat\MelonLoader\Managed\UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="IL2CPP.cs" />
    <Compile Include="MonoBehaviour.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>
using NekoClient;
using NekoClient.Exploits;
using NekoClient.Helpers;
using NekoClient.Logging;
using NekoClient.Wrappers.Reflection;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC;

namespace KOS
{
    public class KOS : PluginBase
    {
        private class Identifiers
        {
            public List<string> SteamIds { get; set; }
            public List<string> UserIds { get; set; }
        }

        private class KOSEntries
        {
            public string Description { get; set; }
            public Identifiers Identifiers { get; set; }
        }

        private class Configuration
        {
            public bool Enabled { get; set; }
            public List<KOSEntries> Entries { get; set; }
        }

        private Configuration Config;

        public KOS()
        {
            if (FileSystem.FileExists("Configuration\\KOS.json"))
            {
                Config = FileSystem.LoadJson<Configuration>("Configuration\\KOS.json");
                Log.Info($"Loaded {Config.Entries.Count} KOS entries");
            }
            else
            {
                Config = new Configuration()
                {
                    Enabled = true,
                    Entries = new List<KOSEntries>()
                    {
                        new KOSEntries()
                        {
                            Description = "Example Entry",
                            Identifiers = new Identifiers()
                            {
                                SteamIds = new List<string>()
                                {
                                    "someSteamId",
                                    "someOtherSteamId"
                                },
                                UserIds = new List<string>()
                                {
                                    "someUserId",
                                    "someOtherUserId"
                                }
                            }
                        }
                    }
                };

                FileSystem.SaveJson<Configuration>("Configuration\\KOS.json", Config);

                Log.Info("Generated new KOS config");
            }

            Tick += KOS_Tick;
        }

        private float m_lastCheck = 0f;
        private List<Player> m_targets = new List<Player>();

        private void KOS_Tick()
        {
            if (RoomManagerBaseWrappers.InRoom && Time.time - m_lastCheck > 5f)
            {
                List<Player> playerList = PlayerManager.GetAllPlayers().ToList();

                m_targets = playerList.Where(p =>
                    Config.Entries.Any(e =>
                        e.Identifiers.UserIds.Any(i =>
                            i == p.UserId()
                        )
                    /*||
                    e.Identifiers.SteamIds.Any(i =>
                        i == p.GetPlayerSteamId()
                    )*/
                    )
                ).ToList();

                m_lastCheck = Time.time;
            }

            if (m_targets.Count() != 0)
            {
                IEnumerable<object> pp = m_targets.Select(p => p.PhotonPlayer());

                LoglessGen2 gen2 = new LoglessGen2(pp.ToArray());
                gen2.Trigger();

                m_targets.Clear();
            }
        }
    }
}
using VRC;
using VRC.Core;
using MelonLoader;
using UnityEngine;
using KabulClient.Features.Worlds;
using Il2CppSystem.Collections.Generic;

namespace KabulClient
{
    class Menu
    {
        // 0 = Main
        // 1 = ESP
        // 2 = World
        // 3 = Players
        private static int selectedTab = 0;

        public static bool showMenu = false;
        private static int yOffset = 0;
        public static Player selectedPlayer = null;

        public static void ToggleMenu()
        {
            MelonLogger.Msg("Toggling menu.");
            showMenu = !showMenu;
        }

        public static void HandleCursor()
        {
            // If the menu is disabled these will be set back automatically by VRChat itself.
            Cursor.lockState = showMenu ? CursorLockMode.None : Cursor.lockState;
            Cursor.visible = showMenu;
        }

        private static void ESPTab()
        {
            yOffset = 70;

            GUI.contentColor = Features.ESP.espEnabled ? Color.green : Color.red;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), Features.ESP.espEnabled ? "ESP enabled" : "ESP disabled"))
            {
                Features.ESP.Toggle();
            }

            GUI.contentColor = Color.white;

            yOffset += 25;

            GUI.contentColor = Features.ESP.linesEnabled ? Color.green : Color.red;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), Features.ESP.linesEnabled ? "Line ESP enabled" : "Line ESP disabled"))
            {
                Features.ESP.linesEnabled = !Features.ESP.linesEnabled;
            }

            GUI.contentColor = Color.white;

            yOffset += 30;
            
            Features.ESP.espRainbowSpeed = GUI.HorizontalSlider(new Rect(20, yOffset, 200, 20), Features.ESP.espRainbowSpeed, 0.0f, 1.0f);
            GUI.Label(new Rect(20, yOffset + 10, 200, 20), $"RGB speed ({Features.ESP.espRainbowSpeed.ToString()})");

            yOffset += 30;
        }

        private static void WorldTab()
        {
            yOffset = 70;

            // This is messy.
            if (JustBClub.worldLoaded)
            {
                if (JustBClub.roomsInitialized)
                {
                    VRCPlayer localPlayer = Utils.GetLocalPlayer();

                    foreach (JustBClub.PrivateRoom privateRoom in JustBClub.privateRooms)
                    {
                        // Keep in mind that if one of these are null, all of them are null.
                        if (privateRoom == null)
                        {
                            continue;
                        }

                        // TODO: Find detection for the VIP room.
                        if (privateRoom.roomNumber != 7)
                        {
                            GUI.Label(new Rect(220, yOffset - 2, 500, 20), $"Score: {JustBClub.CalculateRoomScore(privateRoom)}");
                        }
                        
                        if (GUI.Button(new Rect(20, yOffset, 200, 20), privateRoom.roomNumber == 7 ? "VIP room" : $"Room {privateRoom.roomNumber}"))
                        {
                            // Set the room object active so we can see and interact with it.
                            privateRoom.roomObject?.SetActive(true);

                            // Teleport to the room.
                            localPlayer.transform.position = privateRoom.position;
                        }

                        yOffset += 20;
                    }
                }
                else
                {
                    if (GUI.Button(new Rect(20, yOffset, 200, 20), "Initialize rooms"))
                    {
                        JustBClub.InitializeRooms();
                    }

                    yOffset += 30;
                }
            }
            else if (AmongUs.worldLoaded)
            {
                // TODO: Check if you're in the game session first.
                if (GUI.Button(new Rect(20, yOffset, 200, 20), "Call emergency button"))
                {
                    AmongUs.EmergencyButton();
                }

                yOffset += 20;

                if (GUI.Button(new Rect(20, yOffset, 200, 20), "Abort current game"))
                {
                    AmongUs.CallUdonEvent("SyncAbort");
                }

                yOffset += 20;

                if (GUI.Button(new Rect(20, yOffset, 200, 20), "Play kill sound"))
                {
                    AmongUs.CallUdonEvent("OnLocalPlayerKillsOther");
                }

                yOffset += 20;

                if (GUI.Button(new Rect(20, yOffset, 200, 20), "Sabotage lights"))
                {
                    AmongUs.CallUdonEvent("SyncDoSabotageLights");
                }

                yOffset += 20;

                if (GUI.Button(new Rect(20, yOffset, 200, 20), "Fix lights"))
                {
                    AmongUs.CallUdonEvent("SyncRepairLights");
                }

                yOffset += 30;

                GUI.contentColor = AmongUs.emergencyAnnoyEnabled ? Color.green : Color.red;

                if (GUI.Button(new Rect(20, yOffset, 200, 20), AmongUs.emergencyAnnoyEnabled ? "Meeting spam enabled" : "Meeting spam disabled"))
                {
                    AmongUs.emergencyAnnoyEnabled = !AmongUs.emergencyAnnoyEnabled;
                }

                GUI.contentColor = Color.white;

                yOffset += 30;
            }
            else
            {
                GUI.Label(new Rect(20, yOffset, 200, 20), "No options exist for this world!");
            }
        }

        private static void PlayerTab(Player ply)
        {
            APIUser apiUser = ply?.prop_APIUser_0;

            yOffset = 70;

            GUI.Label(new Rect(20, yOffset, 500, 20), $"Selected player: {apiUser.displayName}");
            yOffset += 20;

            GUI.Label(new Rect(20, yOffset, 500, 20), $"Position: {ply.transform.position.ToString()}");
            yOffset += 15;

            GUI.Label(new Rect(20, yOffset, 500, 20), $"Rotation: {ply.transform.rotation.ToString()}");
            // yOffset += 15;

            yOffset += 30;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), "Teleport"))
            {
                VRCPlayer localPlayer = Utils.GetLocalPlayer();

                if (localPlayer != null && ply != null)
                {
                    localPlayer.transform.position = ply.transform.position;
                }
            }

            yOffset += 20;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), "Clone avatar"))
            {
                Features.ForceClone.CloneAvatar(ply);
            }

            yOffset += 30;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), "Back"))
            {
                selectedPlayer = null;
            }

            yOffset += 30;
        }

        private static void PlayersTab()
        {
            if (selectedPlayer == null)
            {
                yOffset = 70;

                List<Player> players = Utils.GetAllPlayers();

                foreach (Player player in players)
                {
                    if (player == null)
                    {
                        continue;
                    }

                    if (GUI.Button(new Rect(20, yOffset, 300, 20), $"{player?.prop_APIUser_0.displayName}"))
                    {
                        MelonLogger.Msg($"Selecting player {player?.prop_APIUser_0.displayName}.");
                        selectedPlayer = player;
                    }

                    yOffset += 20;
                }
            }
            else
            {
                PlayerTab(selectedPlayer);
            }
        }

        private static void MainTab()
        {
            yOffset = 70;

            GUI.contentColor = Features.AntiPortal.antiPortalEnabled ? Color.green : Color.red;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), Features.AntiPortal.antiPortalEnabled ? "Anti-Portal enabled" : "Anti-Portal disabled"))
            {
                Features.AntiPortal.Toggle();
            }

            GUI.contentColor = Color.white;

            yOffset += 30;

            GUI.contentColor = Features.Noclip.noclipEnabled ? Color.green : Color.red;

            if (GUI.Button(new Rect(20, yOffset, 200, 20), Features.Noclip.noclipEnabled ? "Noclip enabled" : "Noclip disabled"))
            {
                Features.Noclip.Toggle();
            }

            GUI.contentColor = Color.white;

            yOffset += 30;

            Features.Speedhack.speedMultiplier = GUI.HorizontalSlider(new Rect(20, yOffset, 200, 20), Features.Speedhack.speedMultiplier, 1, 10);
            GUI.Label(new Rect(20, yOffset + 10, 400, 20), $"Speed ({Features.Speedhack.speedMultiplier.ToString()})");
            
            yOffset += 30;
        }

        private static void DisplayHud()
        {
            /*
            int yHudOffset = 0;
            
            GUI.Label(new Rect(20, yHudOffset, 400, 20), $"Kabul Client");

            yHudOffset += 20;
            */
        }

        public static void Main()
        {
            DisplayHud();

            if (!showMenu)
            {
                return;
            }

            // This code sucks dick and I HATE UI being done in code.
            GUI.BeginGroup(new Rect(10, 10, 500, 700));

            GUI.contentColor = Color.yellow;
            GUI.Box(new Rect(0, 0, 500, 700), "Kabul Client");
            GUI.contentColor = Color.white;

            // Tab control.
            // This is really bad but due to how using GUI.SelectionGrid crashes the game due to the fact it tries
            // to use string[] for what is supposed to be Il2CppStringArray which I can't figure out how to create.
            if (GUI.Button(new Rect(20, 40, 50, 20), (selectedTab == 0) ? "[Main]" : "Main")) { selectedTab = 0; }
            if (GUI.Button(new Rect(70, 40, 50, 20), (selectedTab == 1) ? "[ESP]": "ESP")) { selectedTab = 1; }
            if (GUI.Button(new Rect(120, 40, 60, 20), (selectedTab == 2) ? "[World]" : "World")) { selectedTab = 2; }
            if (GUI.Button(new Rect(180, 40, 70, 20), (selectedTab == 3) ? "[Players]" : "Players")) { selectedTab = 3; }

            // Choose the tab to render.
            switch (selectedTab)
            {
                case 0: MainTab(); break;
                case 1: ESPTab(); break;
                case 2: WorldTab(); break;
                case 3: PlayersTab(); break;
            }

            GUI.EndGroup();
        }
    }
}
